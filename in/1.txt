(define (square z) (* z z))
(print ((lambda (x y z) (+ x y (square z))) 1 2 3))     // 12\n
(define (f x y) (let ((a (+ 1 (* x y))) (b (- 1 y))) (+ (* x (square a)) (* y b) (* a b))))
(displayln (f 3 4))        // 456\n
(define x 5)
(display (+ (let ((x 3)) (+ x (* x 10))) x))        // 38
(print (let ((x 3) (y (+ x 2))) (* x y)))           // 21\n
(define (add-rat x y) (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
(define (sub-rat x y) (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x))) (* (denom x) (denom y))))
(define (mul-rat x y) (make-rat (* (numer x) (numer y)) (* (denom x) (denom y))))
(define (div-rat x y) (make-rat (* (numer x) (denom y)) (* (denom x) (numer y))))
(define (equal-rat? x y) (= (* (numer x) (denom y)) (* (numer y) (denom x))))
(define x (cons 1 (cons 2 '())))
(display (car x))       // 1
(display (cdr x))       // (2)
(define x (list 1 2))
(define y (list 3 4))
(define z (cons x y))
(display (car (car z)))     // 1
(display (car (cdr z)))     // 3
(newline)       // \n
(print z)       // ((1 2) 3 4)\n
